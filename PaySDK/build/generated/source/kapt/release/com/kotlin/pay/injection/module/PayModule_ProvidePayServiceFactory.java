// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.pay.injection.module;

import com.kotlin.pay.service.PayService;
import com.kotlin.pay.service.impl.PayServiceImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PayModule_ProvidePayServiceFactory implements Factory<PayService> {
  private final PayModule module;

  private final Provider<PayServiceImpl> payServiceProvider;

  public PayModule_ProvidePayServiceFactory(
      PayModule module, Provider<PayServiceImpl> payServiceProvider) {
    assert module != null;
    this.module = module;
    assert payServiceProvider != null;
    this.payServiceProvider = payServiceProvider;
  }

  @Override
  public PayService get() {
    return Preconditions.checkNotNull(
        module.providePayService(payServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<PayService> create(
      PayModule module, Provider<PayServiceImpl> payServiceProvider) {
    return new PayModule_ProvidePayServiceFactory(module, payServiceProvider);
  }
}
