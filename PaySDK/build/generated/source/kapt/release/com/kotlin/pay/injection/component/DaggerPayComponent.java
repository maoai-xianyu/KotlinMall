// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.pay.injection.component;

import android.content.Context;
import com.kotlin.base.injection.component.ActivityComponent;
import com.kotlin.pay.data.repository.PayRepository_Factory;
import com.kotlin.pay.injection.module.PayModule;
import com.kotlin.pay.injection.module.PayModule_ProvidePayServiceFactory;
import com.kotlin.pay.presenter.PayPresenter;
import com.kotlin.pay.presenter.PayPresenter_Factory;
import com.kotlin.pay.presenter.PayPresenter_MembersInjector;
import com.kotlin.pay.service.PayService;
import com.kotlin.pay.service.impl.PayServiceImpl;
import com.kotlin.pay.service.impl.PayServiceImpl_Factory;
import com.kotlin.pay.service.impl.PayServiceImpl_MembersInjector;
import com.kotlin.pay.ui.activity.CashRegisterActivity;
import com.kotlin.pay.ui.activity.CashRegisterActivity_MembersInjector;
import com.trello.rxlifecycle.LifecycleProvider;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerPayComponent implements PayComponent {
  private Provider<LifecycleProvider<?>> lifecycleProvider;

  private Provider<Context> contextProvider;

  private MembersInjector<PayServiceImpl> payServiceImplMembersInjector;

  private Provider<PayServiceImpl> payServiceImplProvider;

  private Provider<PayService> providePayServiceProvider;

  private MembersInjector<PayPresenter> payPresenterMembersInjector;

  private Provider<PayPresenter> payPresenterProvider;

  private MembersInjector<CashRegisterActivity> cashRegisterActivityMembersInjector;

  private DaggerPayComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.lifecycleProvider =
        new com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
            builder.activityComponent);

    this.contextProvider =
        new com_kotlin_base_injection_component_ActivityComponent_context(
            builder.activityComponent);

    this.payServiceImplMembersInjector =
        PayServiceImpl_MembersInjector.create(PayRepository_Factory.create());

    this.payServiceImplProvider = PayServiceImpl_Factory.create(payServiceImplMembersInjector);

    this.providePayServiceProvider =
        PayModule_ProvidePayServiceFactory.create(builder.payModule, payServiceImplProvider);

    this.payPresenterMembersInjector =
        PayPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, providePayServiceProvider);

    this.payPresenterProvider = PayPresenter_Factory.create(payPresenterMembersInjector);

    this.cashRegisterActivityMembersInjector =
        CashRegisterActivity_MembersInjector.create(payPresenterProvider);
  }

  @Override
  public void inject(CashRegisterActivity activity) {
    cashRegisterActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private PayModule payModule;

    private ActivityComponent activityComponent;

    private Builder() {}

    public PayComponent build() {
      if (payModule == null) {
        this.payModule = new PayModule();
      }
      if (activityComponent == null) {
        throw new IllegalStateException(
            ActivityComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerPayComponent(this);
    }

    public Builder payModule(PayModule payModule) {
      this.payModule = Preconditions.checkNotNull(payModule);
      return this;
    }

    public Builder activityComponent(ActivityComponent activityComponent) {
      this.activityComponent = Preconditions.checkNotNull(activityComponent);
      return this;
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider
      implements Provider<LifecycleProvider<?>> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public LifecycleProvider<?> get() {
      return Preconditions.checkNotNull(
          activityComponent.lifecycleProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_context
      implements Provider<Context> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_context(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          activityComponent.context(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
