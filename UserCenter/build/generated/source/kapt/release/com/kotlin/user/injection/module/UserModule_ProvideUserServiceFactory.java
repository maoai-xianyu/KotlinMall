// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.user.injection.module;

import com.kotlin.user.service.UserService;
import com.kotlin.user.service.impl.UserServiceImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class UserModule_ProvideUserServiceFactory implements Factory<UserService> {
  private final UserModule module;

  private final Provider<UserServiceImpl> userServiceProvider;

  public UserModule_ProvideUserServiceFactory(
      UserModule module, Provider<UserServiceImpl> userServiceProvider) {
    assert module != null;
    this.module = module;
    assert userServiceProvider != null;
    this.userServiceProvider = userServiceProvider;
  }

  @Override
  public UserService get() {
    return Preconditions.checkNotNull(
        module.provideUserService(userServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<UserService> create(
      UserModule module, Provider<UserServiceImpl> userServiceProvider) {
    return new UserModule_ProvideUserServiceFactory(module, userServiceProvider);
  }
}
