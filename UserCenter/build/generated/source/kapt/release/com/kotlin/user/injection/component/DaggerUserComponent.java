// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.user.injection.component;

import android.content.Context;
import com.kotlin.base.injection.component.ActivityComponent;
import com.kotlin.user.data.respository.UploadRepository_Factory;
import com.kotlin.user.data.respository.UserRepository_Factory;
import com.kotlin.user.injection.module.UploadModule;
import com.kotlin.user.injection.module.UploadModule_ProvideUploadServiceFactory;
import com.kotlin.user.injection.module.UserModule;
import com.kotlin.user.injection.module.UserModule_ProvideUserServiceFactory;
import com.kotlin.user.presenter.ForgetPwdPresenter;
import com.kotlin.user.presenter.ForgetPwdPresenter_Factory;
import com.kotlin.user.presenter.ForgetPwdPresenter_MembersInjector;
import com.kotlin.user.presenter.LoginPresenter;
import com.kotlin.user.presenter.LoginPresenter_Factory;
import com.kotlin.user.presenter.LoginPresenter_MembersInjector;
import com.kotlin.user.presenter.RegisterPresenter;
import com.kotlin.user.presenter.RegisterPresenter_Factory;
import com.kotlin.user.presenter.RegisterPresenter_MembersInjector;
import com.kotlin.user.presenter.ResetPwdPresenter;
import com.kotlin.user.presenter.ResetPwdPresenter_Factory;
import com.kotlin.user.presenter.ResetPwdPresenter_MembersInjector;
import com.kotlin.user.presenter.UserInfoPresenter;
import com.kotlin.user.presenter.UserInfoPresenter_Factory;
import com.kotlin.user.presenter.UserInfoPresenter_MembersInjector;
import com.kotlin.user.service.UploadService;
import com.kotlin.user.service.UserService;
import com.kotlin.user.service.impl.UploadServiceImpl;
import com.kotlin.user.service.impl.UploadServiceImpl_Factory;
import com.kotlin.user.service.impl.UploadServiceImpl_MembersInjector;
import com.kotlin.user.service.impl.UserServiceImpl;
import com.kotlin.user.service.impl.UserServiceImpl_Factory;
import com.kotlin.user.service.impl.UserServiceImpl_MembersInjector;
import com.kotlin.user.ui.activity.ForgetPwdActivity;
import com.kotlin.user.ui.activity.ForgetPwdActivity_MembersInjector;
import com.kotlin.user.ui.activity.LoginActivity;
import com.kotlin.user.ui.activity.LoginActivity_MembersInjector;
import com.kotlin.user.ui.activity.RegisterActivity;
import com.kotlin.user.ui.activity.RegisterActivity_MembersInjector;
import com.kotlin.user.ui.activity.ResetPwdActivity;
import com.kotlin.user.ui.activity.ResetPwdActivity_MembersInjector;
import com.kotlin.user.ui.activity.UserInfoActivity;
import com.kotlin.user.ui.activity.UserInfoActivity_MembersInjector;
import com.trello.rxlifecycle.LifecycleProvider;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerUserComponent implements UserComponent {
  private Provider<LifecycleProvider<?>> lifecycleProvider;

  private Provider<Context> contextProvider;

  private MembersInjector<UserServiceImpl> userServiceImplMembersInjector;

  private Provider<UserServiceImpl> userServiceImplProvider;

  private Provider<UserService> provideUserServiceProvider;

  private MembersInjector<RegisterPresenter> registerPresenterMembersInjector;

  private Provider<RegisterPresenter> registerPresenterProvider;

  private MembersInjector<RegisterActivity> registerActivityMembersInjector;

  private MembersInjector<LoginPresenter> loginPresenterMembersInjector;

  private Provider<LoginPresenter> loginPresenterProvider;

  private MembersInjector<LoginActivity> loginActivityMembersInjector;

  private MembersInjector<ForgetPwdPresenter> forgetPwdPresenterMembersInjector;

  private Provider<ForgetPwdPresenter> forgetPwdPresenterProvider;

  private MembersInjector<ForgetPwdActivity> forgetPwdActivityMembersInjector;

  private MembersInjector<ResetPwdPresenter> resetPwdPresenterMembersInjector;

  private Provider<ResetPwdPresenter> resetPwdPresenterProvider;

  private MembersInjector<ResetPwdActivity> resetPwdActivityMembersInjector;

  private MembersInjector<UploadServiceImpl> uploadServiceImplMembersInjector;

  private Provider<UploadServiceImpl> uploadServiceImplProvider;

  private Provider<UploadService> provideUploadServiceProvider;

  private MembersInjector<UserInfoPresenter> userInfoPresenterMembersInjector;

  private Provider<UserInfoPresenter> userInfoPresenterProvider;

  private MembersInjector<UserInfoActivity> userInfoActivityMembersInjector;

  private DaggerUserComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.lifecycleProvider =
        new com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
            builder.activityComponent);

    this.contextProvider =
        new com_kotlin_base_injection_component_ActivityComponent_context(
            builder.activityComponent);

    this.userServiceImplMembersInjector =
        UserServiceImpl_MembersInjector.create(UserRepository_Factory.create());

    this.userServiceImplProvider = UserServiceImpl_Factory.create(userServiceImplMembersInjector);

    this.provideUserServiceProvider =
        UserModule_ProvideUserServiceFactory.create(builder.userModule, userServiceImplProvider);

    this.registerPresenterMembersInjector =
        RegisterPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideUserServiceProvider);

    this.registerPresenterProvider =
        RegisterPresenter_Factory.create(registerPresenterMembersInjector);

    this.registerActivityMembersInjector =
        RegisterActivity_MembersInjector.create(registerPresenterProvider);

    this.loginPresenterMembersInjector =
        LoginPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideUserServiceProvider);

    this.loginPresenterProvider = LoginPresenter_Factory.create(loginPresenterMembersInjector);

    this.loginActivityMembersInjector =
        LoginActivity_MembersInjector.create(loginPresenterProvider);

    this.forgetPwdPresenterMembersInjector =
        ForgetPwdPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideUserServiceProvider);

    this.forgetPwdPresenterProvider =
        ForgetPwdPresenter_Factory.create(forgetPwdPresenterMembersInjector);

    this.forgetPwdActivityMembersInjector =
        ForgetPwdActivity_MembersInjector.create(forgetPwdPresenterProvider);

    this.resetPwdPresenterMembersInjector =
        ResetPwdPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideUserServiceProvider);

    this.resetPwdPresenterProvider =
        ResetPwdPresenter_Factory.create(resetPwdPresenterMembersInjector);

    this.resetPwdActivityMembersInjector =
        ResetPwdActivity_MembersInjector.create(resetPwdPresenterProvider);

    this.uploadServiceImplMembersInjector =
        UploadServiceImpl_MembersInjector.create(UploadRepository_Factory.create());

    this.uploadServiceImplProvider =
        UploadServiceImpl_Factory.create(uploadServiceImplMembersInjector);

    this.provideUploadServiceProvider =
        UploadModule_ProvideUploadServiceFactory.create(
            builder.uploadModule, uploadServiceImplProvider);

    this.userInfoPresenterMembersInjector =
        UserInfoPresenter_MembersInjector.create(
            lifecycleProvider,
            contextProvider,
            provideUserServiceProvider,
            provideUploadServiceProvider);

    this.userInfoPresenterProvider =
        UserInfoPresenter_Factory.create(userInfoPresenterMembersInjector);

    this.userInfoActivityMembersInjector =
        UserInfoActivity_MembersInjector.create(userInfoPresenterProvider);
  }

  @Override
  public void inject(RegisterActivity activity) {
    registerActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(LoginActivity activity) {
    loginActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(ForgetPwdActivity activity) {
    forgetPwdActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(ResetPwdActivity activity) {
    resetPwdActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(UserInfoActivity activity) {
    userInfoActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private UserModule userModule;

    private UploadModule uploadModule;

    private ActivityComponent activityComponent;

    private Builder() {}

    public UserComponent build() {
      if (userModule == null) {
        this.userModule = new UserModule();
      }
      if (uploadModule == null) {
        this.uploadModule = new UploadModule();
      }
      if (activityComponent == null) {
        throw new IllegalStateException(
            ActivityComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerUserComponent(this);
    }

    public Builder userModule(UserModule userModule) {
      this.userModule = Preconditions.checkNotNull(userModule);
      return this;
    }

    public Builder uploadModule(UploadModule uploadModule) {
      this.uploadModule = Preconditions.checkNotNull(uploadModule);
      return this;
    }

    public Builder activityComponent(ActivityComponent activityComponent) {
      this.activityComponent = Preconditions.checkNotNull(activityComponent);
      return this;
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider
      implements Provider<LifecycleProvider<?>> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public LifecycleProvider<?> get() {
      return Preconditions.checkNotNull(
          activityComponent.lifecycleProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_context
      implements Provider<Context> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_context(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          activityComponent.context(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
