// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.order.injection.module;

import com.kotlin.order.service.ShipAddressService;
import com.kotlin.order.service.impl.ShipAddressServiceImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ShipAddressModule_ProvideShipAddressserviceFactory
    implements Factory<ShipAddressService> {
  private final ShipAddressModule module;

  private final Provider<ShipAddressServiceImpl> shipAddressServiceProvider;

  public ShipAddressModule_ProvideShipAddressserviceFactory(
      ShipAddressModule module, Provider<ShipAddressServiceImpl> shipAddressServiceProvider) {
    assert module != null;
    this.module = module;
    assert shipAddressServiceProvider != null;
    this.shipAddressServiceProvider = shipAddressServiceProvider;
  }

  @Override
  public ShipAddressService get() {
    return Preconditions.checkNotNull(
        module.provideShipAddressservice(shipAddressServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<ShipAddressService> create(
      ShipAddressModule module, Provider<ShipAddressServiceImpl> shipAddressServiceProvider) {
    return new ShipAddressModule_ProvideShipAddressserviceFactory(
        module, shipAddressServiceProvider);
  }
}
