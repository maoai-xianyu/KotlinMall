// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.order.injection.component;

import android.content.Context;
import com.kotlin.base.injection.component.ActivityComponent;
import com.kotlin.order.data.repository.ShipAddressRepository_Factory;
import com.kotlin.order.injection.module.ShipAddressModule;
import com.kotlin.order.injection.module.ShipAddressModule_ProvideShipAddressserviceFactory;
import com.kotlin.order.presenter.EditShipAddressPresenter;
import com.kotlin.order.presenter.EditShipAddressPresenter_Factory;
import com.kotlin.order.presenter.EditShipAddressPresenter_MembersInjector;
import com.kotlin.order.presenter.ShipAddressPresenter;
import com.kotlin.order.presenter.ShipAddressPresenter_Factory;
import com.kotlin.order.presenter.ShipAddressPresenter_MembersInjector;
import com.kotlin.order.service.ShipAddressService;
import com.kotlin.order.service.impl.ShipAddressServiceImpl;
import com.kotlin.order.service.impl.ShipAddressServiceImpl_Factory;
import com.kotlin.order.service.impl.ShipAddressServiceImpl_MembersInjector;
import com.kotlin.order.ui.activity.ShipAddressActivity;
import com.kotlin.order.ui.activity.ShipAddressActivity_MembersInjector;
import com.kotlin.order.ui.activity.ShipAddressEditActivity;
import com.kotlin.order.ui.activity.ShipAddressEditActivity_MembersInjector;
import com.trello.rxlifecycle.LifecycleProvider;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerShipAddressComponent implements ShipAddressComponent {
  private Provider<LifecycleProvider<?>> lifecycleProvider;

  private Provider<Context> contextProvider;

  private MembersInjector<ShipAddressServiceImpl> shipAddressServiceImplMembersInjector;

  private Provider<ShipAddressServiceImpl> shipAddressServiceImplProvider;

  private Provider<ShipAddressService> provideShipAddressserviceProvider;

  private MembersInjector<EditShipAddressPresenter> editShipAddressPresenterMembersInjector;

  private Provider<EditShipAddressPresenter> editShipAddressPresenterProvider;

  private MembersInjector<ShipAddressEditActivity> shipAddressEditActivityMembersInjector;

  private MembersInjector<ShipAddressPresenter> shipAddressPresenterMembersInjector;

  private Provider<ShipAddressPresenter> shipAddressPresenterProvider;

  private MembersInjector<ShipAddressActivity> shipAddressActivityMembersInjector;

  private DaggerShipAddressComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.lifecycleProvider =
        new com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
            builder.activityComponent);

    this.contextProvider =
        new com_kotlin_base_injection_component_ActivityComponent_context(
            builder.activityComponent);

    this.shipAddressServiceImplMembersInjector =
        ShipAddressServiceImpl_MembersInjector.create(ShipAddressRepository_Factory.create());

    this.shipAddressServiceImplProvider =
        ShipAddressServiceImpl_Factory.create(shipAddressServiceImplMembersInjector);

    this.provideShipAddressserviceProvider =
        ShipAddressModule_ProvideShipAddressserviceFactory.create(
            builder.shipAddressModule, shipAddressServiceImplProvider);

    this.editShipAddressPresenterMembersInjector =
        EditShipAddressPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideShipAddressserviceProvider);

    this.editShipAddressPresenterProvider =
        EditShipAddressPresenter_Factory.create(editShipAddressPresenterMembersInjector);

    this.shipAddressEditActivityMembersInjector =
        ShipAddressEditActivity_MembersInjector.create(editShipAddressPresenterProvider);

    this.shipAddressPresenterMembersInjector =
        ShipAddressPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideShipAddressserviceProvider);

    this.shipAddressPresenterProvider =
        ShipAddressPresenter_Factory.create(shipAddressPresenterMembersInjector);

    this.shipAddressActivityMembersInjector =
        ShipAddressActivity_MembersInjector.create(shipAddressPresenterProvider);
  }

  @Override
  public void inject(ShipAddressEditActivity activity) {
    shipAddressEditActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(ShipAddressActivity activity) {
    shipAddressActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private ShipAddressModule shipAddressModule;

    private ActivityComponent activityComponent;

    private Builder() {}

    public ShipAddressComponent build() {
      if (shipAddressModule == null) {
        this.shipAddressModule = new ShipAddressModule();
      }
      if (activityComponent == null) {
        throw new IllegalStateException(
            ActivityComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerShipAddressComponent(this);
    }

    public Builder shipAddressModule(ShipAddressModule shipAddressModule) {
      this.shipAddressModule = Preconditions.checkNotNull(shipAddressModule);
      return this;
    }

    public Builder activityComponent(ActivityComponent activityComponent) {
      this.activityComponent = Preconditions.checkNotNull(activityComponent);
      return this;
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider
      implements Provider<LifecycleProvider<?>> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public LifecycleProvider<?> get() {
      return Preconditions.checkNotNull(
          activityComponent.lifecycleProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_context
      implements Provider<Context> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_context(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          activityComponent.context(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
