// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.goods.injection.component;

import android.content.Context;
import com.kotlin.base.injection.component.ActivityComponent;
import com.kotlin.goods.data.repository.CartRepository_Factory;
import com.kotlin.goods.data.repository.GoodsRepository_Factory;
import com.kotlin.goods.injection.module.CartModule;
import com.kotlin.goods.injection.module.CartModule_ProvideCartserviceFactory;
import com.kotlin.goods.injection.module.GoodsModule;
import com.kotlin.goods.injection.module.GoodsModule_ProvideGoodserviceFactory;
import com.kotlin.goods.presenter.GoodsDetailPresenter;
import com.kotlin.goods.presenter.GoodsDetailPresenter_Factory;
import com.kotlin.goods.presenter.GoodsDetailPresenter_MembersInjector;
import com.kotlin.goods.presenter.GoodsListPresenter;
import com.kotlin.goods.presenter.GoodsListPresenter_Factory;
import com.kotlin.goods.presenter.GoodsListPresenter_MembersInjector;
import com.kotlin.goods.service.CartService;
import com.kotlin.goods.service.GoodsService;
import com.kotlin.goods.service.impl.CartServiceImpl;
import com.kotlin.goods.service.impl.CartServiceImpl_Factory;
import com.kotlin.goods.service.impl.CartServiceImpl_MembersInjector;
import com.kotlin.goods.service.impl.GoodsServiceImpl;
import com.kotlin.goods.service.impl.GoodsServiceImpl_Factory;
import com.kotlin.goods.service.impl.GoodsServiceImpl_MembersInjector;
import com.kotlin.goods.ui.activity.GoodsActivity;
import com.kotlin.goods.ui.activity.GoodsActivity_MembersInjector;
import com.kotlin.goods.ui.fragment.GoodsDetailTabOneFragment;
import com.kotlin.goods.ui.fragment.GoodsDetailTabOneFragment_MembersInjector;
import com.trello.rxlifecycle.LifecycleProvider;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerGoodsComponent implements GoodsComponent {
  private Provider<LifecycleProvider<?>> lifecycleProvider;

  private Provider<Context> contextProvider;

  private MembersInjector<GoodsServiceImpl> goodsServiceImplMembersInjector;

  private Provider<GoodsServiceImpl> goodsServiceImplProvider;

  private Provider<GoodsService> provideGoodserviceProvider;

  private MembersInjector<GoodsListPresenter> goodsListPresenterMembersInjector;

  private Provider<GoodsListPresenter> goodsListPresenterProvider;

  private MembersInjector<GoodsActivity> goodsActivityMembersInjector;

  private MembersInjector<CartServiceImpl> cartServiceImplMembersInjector;

  private Provider<CartServiceImpl> cartServiceImplProvider;

  private Provider<CartService> provideCartserviceProvider;

  private MembersInjector<GoodsDetailPresenter> goodsDetailPresenterMembersInjector;

  private Provider<GoodsDetailPresenter> goodsDetailPresenterProvider;

  private MembersInjector<GoodsDetailTabOneFragment> goodsDetailTabOneFragmentMembersInjector;

  private DaggerGoodsComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.lifecycleProvider =
        new com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
            builder.activityComponent);

    this.contextProvider =
        new com_kotlin_base_injection_component_ActivityComponent_context(
            builder.activityComponent);

    this.goodsServiceImplMembersInjector =
        GoodsServiceImpl_MembersInjector.create(GoodsRepository_Factory.create());

    this.goodsServiceImplProvider =
        GoodsServiceImpl_Factory.create(goodsServiceImplMembersInjector);

    this.provideGoodserviceProvider =
        GoodsModule_ProvideGoodserviceFactory.create(builder.goodsModule, goodsServiceImplProvider);

    this.goodsListPresenterMembersInjector =
        GoodsListPresenter_MembersInjector.create(
            lifecycleProvider, contextProvider, provideGoodserviceProvider);

    this.goodsListPresenterProvider =
        GoodsListPresenter_Factory.create(goodsListPresenterMembersInjector);

    this.goodsActivityMembersInjector =
        GoodsActivity_MembersInjector.create(goodsListPresenterProvider);

    this.cartServiceImplMembersInjector =
        CartServiceImpl_MembersInjector.create(CartRepository_Factory.create());

    this.cartServiceImplProvider = CartServiceImpl_Factory.create(cartServiceImplMembersInjector);

    this.provideCartserviceProvider =
        CartModule_ProvideCartserviceFactory.create(builder.cartModule, cartServiceImplProvider);

    this.goodsDetailPresenterMembersInjector =
        GoodsDetailPresenter_MembersInjector.create(
            lifecycleProvider,
            contextProvider,
            provideGoodserviceProvider,
            provideCartserviceProvider);

    this.goodsDetailPresenterProvider =
        GoodsDetailPresenter_Factory.create(goodsDetailPresenterMembersInjector);

    this.goodsDetailTabOneFragmentMembersInjector =
        GoodsDetailTabOneFragment_MembersInjector.create(goodsDetailPresenterProvider);
  }

  @Override
  public void inject(GoodsActivity activity) {
    goodsActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(GoodsDetailTabOneFragment fragment) {
    goodsDetailTabOneFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private GoodsModule goodsModule;

    private CartModule cartModule;

    private ActivityComponent activityComponent;

    private Builder() {}

    public GoodsComponent build() {
      if (goodsModule == null) {
        this.goodsModule = new GoodsModule();
      }
      if (cartModule == null) {
        this.cartModule = new CartModule();
      }
      if (activityComponent == null) {
        throw new IllegalStateException(
            ActivityComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerGoodsComponent(this);
    }

    public Builder goodsModule(GoodsModule goodsModule) {
      this.goodsModule = Preconditions.checkNotNull(goodsModule);
      return this;
    }

    public Builder cartModule(CartModule cartModule) {
      this.cartModule = Preconditions.checkNotNull(cartModule);
      return this;
    }

    public Builder activityComponent(ActivityComponent activityComponent) {
      this.activityComponent = Preconditions.checkNotNull(activityComponent);
      return this;
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider
      implements Provider<LifecycleProvider<?>> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_lifecycleProvider(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public LifecycleProvider<?> get() {
      return Preconditions.checkNotNull(
          activityComponent.lifecycleProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_kotlin_base_injection_component_ActivityComponent_context
      implements Provider<Context> {
    private final ActivityComponent activityComponent;

    com_kotlin_base_injection_component_ActivityComponent_context(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(
          activityComponent.context(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
