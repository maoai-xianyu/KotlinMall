// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kotlin.message.injection.module;

import com.kotlin.message.service.MessageService;
import com.kotlin.message.service.impl.MessageServiceImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MessageModule_ProvideMessageServiceFactory implements Factory<MessageService> {
  private final MessageModule module;

  private final Provider<MessageServiceImpl> messageServiceProvider;

  public MessageModule_ProvideMessageServiceFactory(
      MessageModule module, Provider<MessageServiceImpl> messageServiceProvider) {
    assert module != null;
    this.module = module;
    assert messageServiceProvider != null;
    this.messageServiceProvider = messageServiceProvider;
  }

  @Override
  public MessageService get() {
    return Preconditions.checkNotNull(
        module.provideMessageService(messageServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<MessageService> create(
      MessageModule module, Provider<MessageServiceImpl> messageServiceProvider) {
    return new MessageModule_ProvideMessageServiceFactory(module, messageServiceProvider);
  }
}
